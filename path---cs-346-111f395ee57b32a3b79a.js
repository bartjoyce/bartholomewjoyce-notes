webpackJsonp([0xea1d55026f73],{"./node_modules/json-loader/index.js!./.cache/json/cs-346.json":function(s,a){s.exports={data:{site:{siteMetadata:{author:"Bartholomew Joyce"}},markdownRemark:{html:'<h1>Lecture 1</h1>\n<p><em>October 5th, 2017</em></p>\n<p>Significant part of the module: the back-end of databases. Other part: recent\ndevelopment in db tech.</p>\n<p>In other words: 60% is data structures, 40% is operating systems.</p>\n<p>For db performance, we care about I/O ops since db’s are usually stored on\ndisk and not in memory. We optimise algorithms to minimise I/O ops involved.\nClock cycles, or CPU comparisons are relatively cheap by comparison.</p>\n<p><strong>CS258 Recap…</strong><br>\nCS258 was application design: start with a companies needs, construct E/R\ndiagrams, which later become tables in a relational database.</p>\n<p>The relational model was invented by Cod at IBM. SQL became the standard for\nquerying relational models.</p>\n<p><strong>This modules…</strong><br>\nThe back-end. How do you provide for the application guys from CS258?</p>\n<p>Things that we discuss include:</p>\n<ul>\n<li>B-trees (n-ary balanced trees)</li>\n<li>multiple indices: querying multiple attributes simultaneously</li>\n<li>external hashing: hash points to different blocks on disk</li>\n<li>order of joins: what do you join first?</li>\n</ul>\n<span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>B</mi><mi>C</mi><mo>→</mo><mo>(</mo><mi>A</mi><mi>B</mi><mo>)</mo><mi>C</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mo>(</mo><mi>B</mi><mi>C</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">ABC \\rightarrow (AB)C | A(BC)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base"><span class="mord mathit">A</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mrel">→</span><span class="mopen">(</span><span class="mord mathit">A</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mclose">)</span><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mord mathrm">∣</span><span class="mord mathit">A</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mclose">)</span></span></span></span></span>\n<ul>\n<li>OLAP: Can I change this relational model to make it more fit for analysis?</li>\n<li>Teradata: data warehousing company.</li>\n</ul>\n<h1>Lecture 2</h1>\n<p><em>October 6th, 2017</em></p>\n<h3>Why use RDBMS</h3>\n<ul>\n<li>\n<p><strong>Controlling redundancy</strong><br>\nRedundancy causes inconsistencies in the data, update costs, and storage\noverheads. Recent technologies aim to make data consistent, however the\nupdates must be available eventually.</p>\n</li>\n<li>\n<p><strong>Concurrency Control</strong><br>\nDBs control concurrency themselves (not relying on the OS) to make sure\nthe data can be accessed concurrently.</p>\n</li>\n<li>\n<p><strong>Backup and Recovery</strong><br>\nIn case of errors, roll back to the last consistent state.</p>\n</li>\n<li>\n<p><strong>Views, Access Control</strong><br>\nDifferent people can see different parts of the database.</p>\n</li>\n<li>\n<p><strong>Standardization (SQL)</strong><br>\nUse the same language for querying irrespective of the underlying\ndatabase technology.</p>\n</li>\n</ul>\n<h3>When <em>not</em> to use a RDBMS?</h3>\n<p>Small dataset, model doesn’t change often, simple application.</p>\n<h2><strong>Relational databases</strong></h2>\n<ul>\n<li>\n<p>Relational model</p>\n<ul>\n<li>Relational Data Structures</li>\n<li>Integrity Rules</li>\n</ul>\n</li>\n<li>\n<p>Query languages</p>\n<ul>\n<li>Relational Algebra (useful for running queries efficiently)</li>\n<li>Relational Calculus</li>\n<li>SQL</li>\n</ul>\n</li>\n</ul>\n<h3>Keys</h3>\n<ul>\n<li>\n<p>A relation is a <strong>set</strong> of tuples. All elements of a set are distinct.</p>\n</li>\n<li>\n<p>Hence <strong>all tuples must be distinct</strong>.</p>\n</li>\n<li>\n<p>There may also be a <strong>subset of the attributes</strong> with the property that\nvalues <strong>must</strong> be distinct.<br>\nSuch a set is called a <strong><em>superkey</em></strong>.</p>\n<ul>\n<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>K</mi></mrow><annotation encoding="application/x-tex">SK</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base"><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mord mathit" style="margin-right:0.07153em;">K</span></span></span></span> a set of attributes</li>\n<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">t_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.61508em;"></span><span class="strut bottom" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="base"><span class="mord"><span class="mord mathit">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathrm mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"></span></span></span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">t_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.61508em;"></span><span class="strut bottom" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="base"><span class="mord"><span class="mord mathit">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathrm mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"></span></span></span></span></span></span></span></span> tuples</li>\n<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mn>1</mn></msub><mo>[</mo><mi>S</mi><mi>K</mi><mo>]</mo><mo>≠</mo><msub><mi>t</mi><mn>2</mn></msub><mo>[</mo><mi>S</mi><mi>K</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">t_1[SK] \\neq t_2[SK]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base"><span class="mord"><span class="mord mathit">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathrm mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"></span></span></span></span></span><span class="mopen">[</span><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mord mathit" style="margin-right:0.07153em;">K</span><span class="mclose">]</span><span class="mrel">≠</span><span class="mord"><span class="mord mathit">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathrm mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"></span></span></span></span></span><span class="mopen">[</span><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mord mathit" style="margin-right:0.07153em;">K</span><span class="mclose">]</span></span></span></span></li>\n</ul>\n</li>\n<li>\n<p>A <strong><em>candidate key</em></strong> is a minimal super key.</p>\n<ul>\n<li>A set of attributes, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mi>K</mi></mrow><annotation encoding="application/x-tex">CK</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base"><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mord mathit" style="margin-right:0.07153em;">K</span></span></span></span> is a superkey,</li>\n<li>but no proper subset is a superkey.</li>\n</ul>\n</li>\n<li>\n<p>A <strong><em>primary key</em></strong> is one <em>arbitrarily chosen candidate key</em>.</p>\n</li>\n</ul>\n<h3>Integrity Rules</h3>\n<ul>\n<li>\n<p><strong>Domain contrainsts</strong> A data type for each item.</p>\n</li>\n<li>\n<p><strong>Entity integrity:</strong> Every relation has a valid primary key.</p>\n</li>\n<li>\n<p><strong>Referential integrity:</strong> if one column is a foreign key to another table,\nif a row has a non-null value as the column, it MUST exist in the foreign\ntable.</p>\n</li>\n</ul>\n<h3>Normalize</h3>\n<p>(…show tables from slides)</p>\n<h2><strong>Storage, Files, and Indexing</strong></h2>\n<h3>Outline</h3>\n<p><strong>Part 1</strong></p>\n<ul>\n<li>\n<p>Disk properties and file storage</p>\n</li>\n<li>\n<p>File organizations: ordered, unordered, and hashed</p>\n</li>\n<li>\n<p>STorage: RAID and storage are networks</p>\n</li>\n<li>\n<p>Chapter: “Dist Storage, Basic File Structures and Hashing”</p>\n</li>\n</ul>\n<h3>Why?</h3>\n<p>Locality: similar objects in the same block\nParallelism: if there are too many objects to fit in one block, spread them\nover many servers, clustered in the same block within each server.</p>\n<p>Bottom-up perspective on data management.</p>\n<h3>Data on Disks</h3>\n<ul>\n<li>\n<p>Databases ultimately rely on non-volatile disk storage</p>\n<ul>\n<li>Data typically does not fit in (volatile) memory</li>\n</ul>\n</li>\n<li>\n<p>Physical properties of disks affect performance of the DBMS</p>\n<ul>\n<li>Need to understand some basics of disks</li>\n</ul>\n</li>\n<li>\n<p>A few exceptions to disk-based databases:</p>\n<ul>\n<li>Some real-time applications use “in-memory databases”</li>\n</ul>\n</li>\n</ul>\n<h3>Rotating Disk</h3>\n<ul>\n<li>\n<p>Seeking means waiting for your sector of data to come round to the reading\narm. Once you get there you want to do sequential I/O, not random I/O.</p>\n</li>\n<li>\n<p>Too tidy sequential I/O: more data comes along and everything has to be\nshifted forwards.</p>\n</li>\n<li>\n<p>When writing your DB application, you fit your block size to be reasonable.\nSay, 16MB.</p>\n</li>\n<li>\n<p>Seek time: move read head into position, currently <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext> </mtext><mn>4</mn><mi>m</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">~4ms</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.64444em;vertical-align:0em;"></span><span class="base"><span class="mord mathrm"><span class="mspace"> </span><span class="mord mathrm">4</span></span><span class="mord mathit">m</span><span class="mord mathit">s</span></span></span></span></p>\n<ul>\n<li>Includes rotational delay: wait for sector to come under read head.</li>\n<li>Random access: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mn>0</mn><mi mathvariant="normal">.</mi><mn>0</mn><mn>0</mn><mn>4</mn><mo>∗</mo><mn>4</mn><mi>K</mi><mi>B</mi><mo>=</mo><mn>1</mn><mi>M</mi><mi>B</mi><mi mathvariant="normal">/</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">1/0.004 * 4KB = 1MB/s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base"><span class="mord mathrm">1</span><span class="mord mathrm">/</span><span class="mord mathrm">0</span><span class="mord mathrm">.</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mord mathrm">4</span><span class="mbin">∗</span><span class="mord mathrm">4</span><span class="mord mathit" style="margin-right:0.07153em;">K</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mrel">=</span><span class="mord mathrm">1</span><span class="mord mathit" style="margin-right:0.10903em;">M</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathrm">/</span><span class="mord mathit">s</span></span></span></span>. Quite slow…</li>\n</ul>\n</li>\n<li>\n<p>Track-to-track move, currently <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext> </mtext><mn>0</mn><mi mathvariant="normal">.</mi><mn>4</mn><mi>m</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">~0.4ms</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.64444em;vertical-align:0em;"></span><span class="base"><span class="mord mathrm"><span class="mspace"> </span><span class="mord mathrm">0</span></span><span class="mord mathrm">.</span><span class="mord mathrm">4</span><span class="mord mathit">m</span><span class="mord mathit">s</span></span></span></span>: 10 times faster.</p>\n<ul>\n<li>Sustained read/write time: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mn>0</mn><mn>0</mn><mi>M</mi><mi>B</mi><mi mathvariant="normal">/</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">100MB/s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base"><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mord mathit" style="margin-right:0.10903em;">M</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathrm">/</span><span class="mord mathit">s</span></span></span></span> (caching can improve this further)</li>\n</ul>\n</li>\n<li>\n<p>Buffering can help multithreaded systems.</p>\n<ul>\n<li>Work on other processes while waiting for I/O data to arrive.</li>\n<li>For writing on disk, fill a buffer first. When the buffer is full, then\nwrite to disk.</li>\n<li>Double buffering: fill one buffer whilst another is being written to disk.</li>\n</ul>\n</li>\n</ul>\n<h3>Records: the basic unit of the database</h3>\n<ul>\n<li>\n<p>DBs fundamentally composed of records</p>\n<ul>\n<li>Each record describes an object with a number of fields</li>\n</ul>\n</li>\n<li>\n<p>Fields have a type (int, float, string, time, compound…)</p>\n<ul>\n<li>Fixed or variable length</li>\n</ul>\n</li>\n<li>\n<p>Need to know when one field ends and the next begins</p>\n<ul>\n<li>Field length codes</li>\n<li>Field separators (special characters)</li>\n</ul>\n</li>\n<li>\n<p>Leads to <strong>variable length records</strong></p>\n<ul>\n<li>How to effectively search through data with variable length records?</li>\n</ul>\n</li>\n</ul>',excerpt:"Lecture 1 October 5th, 2017 Significant part of the module: the back-end of databases. Other part: recent\ndevelopment in db tech. In other…",frontmatter:{title:"CS346 Advanced Databases",date:"October 03, 2017"}}},pathContext:{slug:"/cs346/"}}}});
//# sourceMappingURL=path---cs-346-111f395ee57b32a3b79a.js.map